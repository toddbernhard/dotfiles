set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()  " set the runtime path to include Vundle and initialize
Plugin 'gmarik/Vundle.vim' " let Vundle manage Vundle, required
" All Plugins

" Scala
Bundle 'derekwyatt/vim-scala'
" Purescipt
Bundle 'raichoo/purescript-vim'
" CoffeeScript
Plugin 'kchmck/vim-coffee-script'
" Less
Bundle 'groenewege/vim-less'
" Javascript (better syntax)
Plugin 'pangloss/vim-javascript'
" Groovy
Plugin 'rdolgushin/groovy.vim'
" SQL
Plugin 'magicalbanana/vim-sql-syntax'

" Ctrl-P -- search by filename
Bundle 'kien/ctrlp.vim'
" Ack -- grep -R, optimized
Bundle 'mileszs/ack.vim'
" toggles btwn relative and absolute line numbering
Bundle 'myusuf3/numbers.vim'
" automatically close open html/xml tags with ctrl+_
Plugin 'vim-scripts/closetag.vim'
" NERDtree -- folder browser within Vim
Plugin 'scrooloose/nerdtree'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" End of Vundle


" Run mkdir -p ~/.vim/backup ~/vim/swp ~/.vim/undo
set undodir=~/.vim/undo//
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//


syntax on

set encoding=utf-8        " Necessary to show Unicode glyphs

set scrolloff=4           " Scroll this many lines boyond cursor

set number                " Show line numbers
set relativenumber        " Show relative line numbers

set incsearch             " Incremental search
set ignorecase            " Ignore case in search ...
set smartcase             "  unless upper case chars occur in search string

set backspace=indent,eol,start  " Allows bs'ing across these things

set history=200           " Remember 200 lines

set wrap

" Tab settings
set expandtab       " Replace tabs with space
set tabstop=2       " (defaults)
set softtabstop=2
set shiftwidth=2

autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4
autocmd Filetype html setlocal tabstop=2 softtabstop=2 shiftwidth=2

" Additional FileExtension->SyntaxHighlighting mappings
autocmd BufNewFile,BufRead *.scalas set filetype=scala
autocmd BufNewFile,BufRead *.avsc set filetype=javascript
autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufNewFile,BufRead *Jenkinsfile set filetype=groovy
autocmd BufNewFile,BufRead .babelrc set filetype=javascript

" set t_Co=256
set background=dark
hi Search ctermfg=152
hi Search ctermbg=236

" tone down line numbers, current line is a bit brighter
highlight LineNr ctermfg=237
highlight CursorLineNr ctermfg=245

set wildignore+=*/target/*,*.swo,*.swp,*/dist/*,*/node_modules/*,*/lib/*,*/export/*

" == Bindings ==
" In visual and normal modes, map T => J => N => K => L => T
" t = til
" T = prev. til
" j = move down
" J = join lines
" n = next search
" N = prev. search
" k = move up
" K = open manpage
" l = move right
" L = move to bottom of window
nnoremap t j
nnoremap T J
vnoremap t j
vnoremap T J

nnoremap n k
nnoremap N K
vnoremap n k
vnoremap N K

nnoremap s l
nnoremap S L
vnoremap s l
vnoremap S L

nnoremap k s
nnoremap K S
vnoremap k s
vnoremap K S

nnoremap j n
nnoremap J N
vnoremap j n
vnoremap J N

nnoremap l t
nnoremap L T
vnoremap l l
vnoremap L T

" In normal mode, single semi-colon <;> maps to full on colon <:>
nnoremap ; :

" In all modes, map double semi-colon <;;> maps back to semi-colon <;>
noremap ;; ;

" Map command <qj> to <wq>
cnoreabbrev <expr> qj ((getcmdtype() is# ':' && getcmdline() is# 'qj')?('wq'):('qj'))

" Map w!! to write file with sudo, when forgot to open with sudo.
cmap w!! w !sudo tee % >/dev/null

" Makes the cursor stay in place as you leave insert mode
autocmd InsertLeave * :normal `^

" In normal mode, map <tab>,<shift+tab> to next,prev tab
nnoremap <C-I> :tabn<CR>
nnoremap <S-Tab> :tabp<CR>

" In visual mode, map <tab>,<shift+tab> to indent,unindent
vnoremap <C-I> >
vnoremap <S-Tab> <

" In insert mode, map <shift+tab> to un-indent
inoremap <S-Tab> <Esc><<i

" In normal mode, map <'> to CtrlP
nnoremap ' :CtrlP<CR>

" In normal mode, map <ctrl+/> to toggle search highlightling
nnoremap <C-l> :set hlsearch!<CR>


" set omnifunc=syntaxcomplete

" Automatically strip whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Ctrl-P : open in new tab by default
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }


" Ack.vim settings
if executable('ag')    " use ag if installed
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

let g:ack_autoclose = 1

" Ack convenience
noremap + :LAck "\W<cword>\W"<CR>
noremap - :lnext<CR>
noremap _ :lprevious<CR>

" colorscheme tomorrow-night
colorscheme badwolf


" Agda?
let maplocalleader = ","

let g:agda_extraincpaths = ["/usr/share/agda-stdlib"]

command! -nargs=0 Load call Load(0)
command! -nargs=0 AgdaVersion call AgdaVersion(0)
command! -nargs=0 Reload silent! make!|redraw!
command! -nargs=0 RestartAgda exec s:python_cmd 'RestartAgda()'
command! -nargs=0 ShowImplicitArguments exec s:python_cmd "sendCommand('ShowImplicitArgs True')"
command! -nargs=0 HideImplicitArguments exec s:python_cmd "sendCommand('ShowImplicitArgs False')"
command! -nargs=0 ToggleImplicitArguments exec s:python_cmd "sendCommand('ToggleImplicitArgs')"
command! -nargs=0 Constraints exec s:python_cmd "sendCommand('Cmd_constraints')"
command! -nargs=0 Metas exec s:python_cmd "sendCommand('Cmd_metas')"
command! -nargs=0 SolveAll exec s:python_cmd "sendCommand('Cmd_solveAll')"
command! -nargs=1 ShowModule call ShowModule(<args>)
command! -nargs=1 WhyInScope call WhyInScope(<args>)
command! -nargs=1 SetRewriteMode exec s:python_cmd "setRewriteMode('<args>')"

nmap <buffer> <LocalLeader>l :Reload<CR>
nmap <buffer> <LocalLeader>t :call Infer()<CR>
nmap <buffer> <LocalLeader>r :call Refine("False")<CR>
nmap <buffer> <LocalLeader>R :call Refine("True")<CR>
nmap <buffer> <LocalLeader>g :call Give()<CR>
nmap <buffer> <LocalLeader>c :call MakeCase()<CR>
nmap <buffer> <LocalLeader>a :call Auto()<CR>
nmap <buffer> <LocalLeader>e :call Context()<CR>
nmap <buffer> <LocalLeader>n :call Normalize("False")<CR>
nmap <buffer> <LocalLeader>N :call Normalize("True")<CR>
nmap <buffer> <LocalLeader>M :call ShowModule('')<CR>
nmap <buffer> <LocalLeader>y :call WhyInScope('')<CR>
nmap <buffer> <LocalLeader>m :Metas<CR>

" Show/reload metas
nmap <buffer> <C-e> :Metas<CR>
imap <buffer> <C-e> <C-o>:Metas<CR>

" Go to next/previous meta
nmap <buffer> <silent> <C-g>  :let _s=@/<CR>/ {!\\| ?<CR>:let @/=_s<CR>2l
imap <buffer> <silent> <C-g>  <C-o>:let _s=@/<CR><C-o>/ {!\\| ?<CR><C-o>:let @/=_s<CR><C-o>2l

nmap <buffer> <silent> <C-y>  2h:let _s=@/<CR>? {!\\| \?<CR>:let @/=_s<CR>2l
imap <buffer> <silent> <C-y>  <C-o>2h<C-o>:let _s=@/<CR><C-o>? {!\\| \?<CR><C-o>:let @/=_s<CR><C-o>2l
